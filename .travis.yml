# Environment variables
language: c
cache: ccache
os: linux
dist: bionic
osx_image: xcode11.2
env: build_type=release
git:
  depth: 5
  quiet: true
  submodules: false
addons:
  apt:
    sources:
      - sourceline: "ppa:ubuntu-toolchain-r/test"
      - sourceline: "deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic main"
        key_url: "https://apt.llvm.org/llvm-snapshot.gpg.key"
    packages:
      - cmake
      - yasm
      - valgrind
      - libgstreamer-plugins-base1.0-dev
      - libgstreamer1.0-dev
      - python3-pip
  homebrew:
    packages:
      - yasm
      - ccache
      - python
notifications:
  webhooks: https://coveralls.io/webhook

# Pipeline stages
stages:
  - name: style
  - name: test
  - name: coveralls+valgrind
    if: type != pull_request
  - name: unittest

# Default scripts
before_install:
  - "sudo chown -R travis: $HOME/.ccache"
  - |
    if [ "$(uname -s)" == "Darwin" ]; then
      sysctl -n machdep.cpu.brand_string
      sysctl machdep.cpu.features
      sysctl machdep.cpu.leaf7_features
    elif [ -f "/proc/cpuinfo" ]; then
      grep -Ei " sse*| ssse*| avx|model name" /proc/cpuinfo  | sort -u
    fi
  - export LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:/usr/local/lib PKG_CONFIG_PATH=${PKG_CONFIG_PATH}:/usr/local/lib/pkgconfig PATH="/usr/local/opt/ccache/libexec:$PATH"
  - cd $TRAVIS_BUILD_DIR
  - wget -nc https://raw.githubusercontent.com/OpenVisualCloud/SVT-AV1-Resources/master/video.tar.gz || wget -nc http://randomderp.com/video.tar.gz
  - tar xf video.tar.gz
  - mkdir -p $TRAVIS_BUILD_DIR/Build/linux/${build_type:-Release}
  - |
    case "$CC" in
    gcc-7) sudo apt-get install -qq gcc-7 g++-7 ;;
    gcc-8) sudo apt-get install -qq gcc-8 g++-8 ;;
    gcc-9) sudo apt-get install -qq gcc-9 g++-9 ;;
    clang-6.0) sudo apt-get install -qq clang-6.0 ;;
    clang-10) sudo apt-get install -qq clang-10 ;;
    esac
    if [ "$TRAVIS_OS_NAME" != "osx" ]; then
      test -f "/usr/lib/ccache/${CC##*/}" || sudo ln -s /usr/bin/ccache /usr/lib/ccache/${CC##*/}
      test -f "/usr/lib/ccache/${CXX##*/}" || sudo ln -s /usr/bin/ccache /usr/lib/ccache/${CXX##*/}
    fi
install:
  - |
    if [ "$TRAVIS_OS_NAME" != "osx" ]; then
      export CFLAGS="-Werror"
      if [ "$CC" = "clang" ]; then export CFLAGS+=" -Wno-error=array-bounds"; fi
    fi
script:
  - &base_script |
    cd $TRAVIS_BUILD_DIR/Build/linux/${build_type:-Release}
    cmake $TRAVIS_BUILD_DIR -G"${generator:-Unix Makefiles}" -DCMAKE_BUILD_TYPE=${build_type:-Release} ${CMAKE_EFLAGS}
    cmake -j $(if [ $TRAVIS_OS_NAME = osx ]; then sysctl -n hw.ncpu; else nproc; fi) --build . &&
    sudo cmake --build . --target install && cd $TRAVIS_BUILD_DIR
  - SvtAv1EncApp -enc-mode 0 -i akiyo_cif.y4m -n 3
  - SvtAv1EncApp -enc-mode 8 -i akiyo_cif.y4m -n 150
  - SvtAv1EncApp -enc-mode 0 -i Chimera-Aerial_480x264_2997fps_10bit_420_150frames.y4m -n 3
  - SvtAv1EncApp -enc-mode 8 -i Chimera-Aerial_480x264_2997fps_10bit_420_150frames.y4m -n 150
before_cache:
  - "sudo chown -R travis: $HOME/.ccache"
  - ccache -c
  - ccache -s

# Build matrix
matrix:
  fast_finish: true
  allow_failures:
    - name: Binary Identical?
    - name: Valgrind
    - name: Coveralls Linux+gcc
    - name: Coveralls osx+clang
    - name: Unit Tests Linux+gcc
    - name: Unit Tests osx+clang
    # Exclude these because if the encoder can run with a release build, the commit is probably fine. Also required for fast_finish.
  include:
    # Coding style check
    - name: Style check
      stage: style
      addons: skip
      before_install: skip
      install: skip
      script:
        - |
          echo "Checking for tabs"
          ! git grep -InP --heading "\t" -- . ':!third_party/**/*'
          echo "Checking for carriage returns"
          ! git grep -InP --heading "\r" -- . ':!third_party/**/*'
          echo "Checking for trailing spaces"
          ! git grep -InP --heading " $" -- . ':!third_party/**/*';
        - git fetch -q https://github.com/OpenVisualCloud/SVT-AV1.git master
        - |
          for file in $(git diff --name-only FETCH_HEAD |
            grep -vE "third_party/|test/e2e_test/test_vector_list.txt|test/vectors/smoking_test.cfg|test/vectors/video_src.cfg|.png"); do
            if [ -n "$(tail -c1 "$file")" ]; then
              echo "No newline at end of $file"
              false
            fi
          done
        - |
          for i in $(git rev-list HEAD ^FETCH_HEAD); do
            echo "Checking commit message of $i"
            msg="$(git log --format=%B -n 1 $i)"
            if [ -n "$(sed -n 2p <<<"$msg")" ]; then
              echo "Malformed commit message in $i, second line must be empty"
              false
            fi
            if head -1 <<<"$msg" | grep -q '\.$'; then
              echo "Malformed commit message in $i, trailing period in subject line"
              false
            fi
          done
    # GCC & Clang builds
    - name: Linux GCC 7 build
      stage: test
      env: build_type=release CC=gcc-7 CXX=g++-7
    - name: Linux GCC 8 build
      env: build_type=release CC=gcc-8 CXX=g++-8
    - name: Linux GCC 9 build
      env: build_type=release CC=gcc-9 CXX=g++-9
    - name: Linux Clang 6 build
      compiler: clang
      env: build_type=release CC=clang-6.0 CXX=clang++-6.0
    - name: Linux Clang 10 build
      compiler: clang
      env: build_type=release CC=clang-10 CXX=clang++-10
    - name: macOS Clang build
      os: osx
      compiler: clang
    # FFmpeg interation build
    - name: FFmpeg patch
      env: build_type=release CMAKE_EFLAGS="-DBUILD_SHARED_LIBS=OFF"
      script:
        # Build and install SVT-AV1
        - *base_script
        # Apply SVT-AV1 plugin and enable libsvtav1 to FFmpeg
        - git clone https://github.com/FFmpeg/FFmpeg --branch release/4.2 --depth=1 ffmpeg && cd ffmpeg
        - git apply $TRAVIS_BUILD_DIR/ffmpeg_plugin/0001-Add-ability-for-ffmpeg-to-run-svt-av1.patch
        - export LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:/usr/local/lib PKG_CONFIG_PATH=${PKG_CONFIG_PATH}:/usr/local/lib/pkgconfig
        - "sudo chown -R travis: $HOME/.ccache"
        - export CFLAGS=""
        - ./configure --enable-libsvtav1 || less ffbuild/config.log
        - make --quiet -j$(nproc) && sudo make install
    # GStreamer interation build
    - name: GStreamer patch
      env: build_type=release
      script:
        # Build and install SVT-AV1
        - *base_script
        # Build GST-SVT-AV1 plugin
        - cd $TRAVIS_BUILD_DIR/gstreamer-plugin
        - "sudo chown -R travis: $HOME/.ccache"
        - CFLAGS="" cmake .
        - make --quiet -j$(nproc)
        - sudo make install
    # Tests if .ivf files are identical on binary level
    - name: Binary Identical?
      script:
        - mv -t $HOME akiyo_cif.y4m
        - mv -t $HOME Chimera-Aerial_480x264_2997fps_10bit_420_150frames.y4m
        - *base_script
        - cd $HOME
        - SvtAv1EncApp -enc-mode 8 -i akiyo_cif.y4m -n 120 -b test-pr-8bit-m8.ivf
        - SvtAv1EncApp -enc-mode 0 -i akiyo_cif.y4m -n 3 -b test-pr-8bit-m0.ivf
        - SvtAv1EncApp -enc-mode 8 -i Chimera-Aerial_480x264_2997fps_10bit_420_150frames.y4m -n 120 -b test-pr-10bit-m8.ivf
        - SvtAv1EncApp -enc-mode 0 -i Chimera-Aerial_480x264_2997fps_10bit_420_150frames.y4m -n 3 -b test-pr-10bit-m0.ivf
        - cd $TRAVIS_BUILD_DIR
        - git fetch https://github.com/OpenVisualCloud/SVT-AV1.git master
        - git checkout FETCH_HEAD
        - rm -rf $TRAVIS_BUILD_DIR/Build/linux/${build_type:-Release}/*
        - *base_script
        - cd $HOME
        - SvtAv1EncApp -enc-mode 8 -i akiyo_cif.y4m -n 120 -b test-master-8bit-m8.ivf
        - SvtAv1EncApp -enc-mode 0 -i akiyo_cif.y4m -n 3 -b test-master-8bit-m0.ivf
        - SvtAv1EncApp -enc-mode 8 -i Chimera-Aerial_480x264_2997fps_10bit_420_150frames.y4m -n 120 -b test-master-10bit-m8.ivf
        - SvtAv1EncApp -enc-mode 0 -i Chimera-Aerial_480x264_2997fps_10bit_420_150frames.y4m -n 3 -b test-master-10bit-m0.ivf
        - diff test-pr-8bit-m8.ivf test-master-8bit-m8.ivf
        - diff test-pr-8bit-m0.ivf test-master-8bit-m0.ivf
        - diff test-pr-10bit-m8.ivf test-master-10bit-m8.ivf
        - diff test-pr-10bit-m0.ivf test-master-10bit-m0.ivf

    # Coveralls on Linux and macOS
    - name: Coveralls Linux+gcc
      stage: coveralls+valgrind
      env: COVERALLS_PARALLEL=true build_type=debug CMAKE_EFLAGS="-DCOVERAGE=ON"
      script:
        - *base_script
        - &coveralls_script |
          pip3 install --user cpp-coveralls
          export PATH=/Users/travis/Library/Python/3.7/bin:${PATH}
          SvtAv1EncApp -enc-mode 8 -i akiyo_cif.y4m -n 150 -b test1.ivf
          git clone https://github.com/FFmpeg/FFmpeg ffmpeg --depth=1 --branch release/4.2 && cd ffmpeg &&
          git apply $TRAVIS_BUILD_DIR/ffmpeg_plugin/0001-Add-ability-for-ffmpeg-to-run-svt-av1.patch &&
          ffmpegconfig=(--disable-everything --enable-{libsvtav1,encoder={libaom_av1,libsvt_av1,rawvideo},decoder={h264,rawvideo,yuv4,libaom_av1},muxer={fifo,matroska,ivf,mp4,rawvideo,webm,yuv4mpegpipe},demuxer={h264,ivf,matroska,mpegts,rawvideo,yuv4mpegpipe},parser={av1,h264,mpeg4video},bsf={av1_metadata,h264_metadata},protocol={data,file,pipe,unix},filter={fifo,fps,libvmaf,psnr,ssim,vmafmotion}})
          sudo chown -R travis: $HOME/.ccache
          export CFLAGS=""
          if ! ./configure ${ffmpegconfig[@]}; then cat ffbuild/config.log; fi &&
          make -s -j$(if [ $TRAVIS_OS_NAME = osx ]; then sysctl -n hw.ncpu; else nproc; fi) >/dev/null &&
          sudo make install && cd $TRAVIS_BUILD_DIR &&
          ffmpeg -i akiyo_cif.y4m -vframes 150 -c:v libsvt_av1 test.mp4 &&
          ffmpeg -i bus_cif.y4m -nostdin -f rawvideo -pix_fmt yuv420p - | SvtAv1EncApp -i stdin -w 352 -h 288 -fps 30 -n 150 -b test2.ivf
      after_script: &after_coveralls_script |
        if [ $CC = "clang" ] && [ $TRAVIS_OS_NAME = linux ]; then
          GCOV_FILE=llvm-cov GCOV_OPTIONS='gcov -pl'
        else
          GCOV_FILE=gcov GCOV_OPTIONS='\-lp'
        fi
        coveralls --root $TRAVIS_BUILD_DIR -i Source -E ".*gtest.*" -E ".*CMakeFiles.*" -E ".*third_party.*" -E ".*test/FilmGrainTest.cc" -E ".*ffmpeg.*" --gcov $GCOV_FILE --gcov-options "$GCOV_OPTIONS"
    - name: Coveralls osx+clang
      os: osx
      compiler: clang
      env: COVERALLS_PARALLEL=true build_type=debug CMAKE_EFLAGS="-DCOVERAGE=ON"
      script:
        - *base_script
        - *coveralls_script
      after_script: *after_coveralls_script

    # Valgrind on Linux and macOS
    - name: Valgrind
      env: build_type=debug
      script:
        - *base_script
        - travis_wait 60 valgrind -- SvtAv1EncApp -enc-mode 4 -i akiyo_cif.y4m -n 20 -b test1.ivf

    # Unittests on Linux and macOS
    - name: Unit Tests Linux+gcc
      stage: unittest
      env: build_type=release CMAKE_EFLAGS="-DBUILD_TESTING=ON" SVT_AV1_TEST_VECTOR_PATH=$TRAVIS_BUILD_DIR/test/vectors/
      script:
        - *base_script
        - &unittests |
          cd $TRAVIS_BUILD_DIR/Build/linux/${build_type:-Release}
          make TestVectors
          cd $TRAVIS_BUILD_DIR
          SvtAv1UnitTests
          SvtAv1ApiTests
          SvtAv1E2ETests
    - name: Unit Tests osx+clang
      os: osx
      compiler: clang
      env: build_type=release CMAKE_EFLAGS="-DBUILD_TESTING=ON" SVT_AV1_TEST_VECTOR_PATH=$TRAVIS_BUILD_DIR/test/vectors/
      script:
        - *base_script
        - *unittests
